#!/bin/sh

root_path=/Users/bartosz/Desktop/Studia/Semestr_6/JFiK/YACC/Exercise_1_1/ELE1

compile()
{
  printf "\033[33m======= kompilacja parsera =======\033[m\n"
  flex -l scan.l && bison -y -d gram.y && gcc -o gram.x -pedantic y.tab.c lex.yy.c
  result=$?
  if [ $result -ne 0 ]
    then
      printf "\033[31m======= Blad kompilacji parsera =======\033[m\n"
    else
      printf "\033[32m======= Parser skompilowany poprawnie =======\033[m\n"
  fi
}

clean()
{
  rm -f lex.yy.c ; rm -f y.tab.c ; rm -f y.tab.h ; rm -f temp.out
}

testuj_przyrost()
{
  compile
  if [ $result -eq 0 ]
    then
      printf "\n\033[33m======= Testy =======\033[m\n"
      for x in `seq $1 $2`
      do
        printf "\033[33m======= przyrost: $przyrost test: $x ======= :\033[m"
	./gram.x < $3/tsi$x.txt > temp.out
	diff $3/tso$x.txt temp.out > /dev/null
	if [ $? -eq 0 ]
	  then printf "\033[32mOK\033[m\n"
	  else
            diff -w $3/tso$x.txt temp.out > /dev/null
            if [ $? -ne 0 ]
	      then printf "\033[31mBlad\033[m\n"
	      else printf "\033[31mMozliwy blad formatowania\033[m\n"
	    fi
	    printf "\n\033[33m======= testowane wejscie =======\033[m\n"
	    cat $3/tsi$x.txt
	    printf "\n\033[32m======= uzyskane wyjscie =======\033[m\n"
	    cat temp.out
	    printf "\n\033[31m======= oczekiwane wyjscie =======\033[m\n"
	    cat $3/tso$x.txt
	    printf "\n\033[32m======= koniec raportu z testowania =======\033[m\n"
	    clean
	    break
         fi
      done
    fi
}


# start processing

clear
przyrost=$1
case $1 in
1)
   testuj_przyrost 1 7 "$root_path/ts1"
   ;;
2)
   testuj_przyrost 1 12 "$root_path/ts2"
   ;;
3)
   testuj_przyrost 1 15 "$root_path/ts3"
   ;;
4)
   testuj_przyrost 1 19 "$root_path/ts4"
   ;;
5)
   testuj_przyrost 1 23 "$root_path/ts5"
   ;;
6)
   testuj_przyrost 1 28 "$root_path/ts6"
   ;;
7)
   testuj_przyrost 1 34 "$root_path/ts7"
   ;;
*)
   printf "\033[31m======= w wywolaniu nalezy podac poprawny numer przyrostu  <1, 7>=======\033[m\n"
   ;;
esac

clean
